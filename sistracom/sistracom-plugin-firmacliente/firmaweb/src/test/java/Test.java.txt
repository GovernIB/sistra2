import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.InputStream;

import org.fundaciobit.pluginsib.core.utils.FileUtils;

import es.caib.sistra2.commons.plugins.firmacliente.api.FicheroAFirmar;
import es.caib.sistra2.commons.plugins.firmacliente.api.FicheroFirmado;
import es.caib.sistra2.commons.plugins.firmacliente.api.FirmaPluginException;
import es.caib.sistra2.commons.plugins.firmacliente.api.IFirmaPlugin;
import es.caib.sistra2.commons.plugins.firmacliente.api.InfoSesionFirma;
import es.caib.sistra2.commons.plugins.firmacliente.api.TypeEstadoFirmado;
import es.caib.sistramit.core.api.model.system.types.TypePluginEntidad;

// TODO Borrar

    private final String entidad = "DIR3-1";

    @Override
    public String testFirmaCreateSesion() throws Exception {
        final IFirmaPlugin plgLogin = (IFirmaPlugin) configuracionComponent
                .obtenerPluginEntidad(TypePluginEntidad.FIRMA, entidad);
        final InfoSesionFirma infoSesionFirma = new InfoSesionFirma();
        infoSesionFirma.setEntidad("12345678C");
        infoSesionFirma.setIdioma("ca");
        infoSesionFirma.setNombreUsuario("jmico");
        return plgLogin.generarSesionFirma(infoSesionFirma);
    }

    @Override
    public String testFirmaAddFichero(final String idSession) throws Exception {

        final IFirmaPlugin plgLogin = (IFirmaPlugin) configuracionComponent
                .obtenerPluginEntidad(TypePluginEntidad.FIRMA, entidad);
        // Paso 2. Leer y subir los 2 ficheros.
        /** AÃ±adimos doc. **/
        InputStream is = null;
        try {
            is = new DataInputStream(new FileInputStream("C://hola.pdf"));
        } catch (final Exception e) {
            is = new DataInputStream(new FileInputStream("//hola.pdf"));
        }
        final ByteArrayOutputStream fos = new ByteArrayOutputStream();
        FileUtils.copy(is, fos);
        final FicheroAFirmar fichero = new FicheroAFirmar();
        fichero.setFichero(fos.toByteArray());
        fichero.setMimetypeFichero("application/pdf");
        fichero.setIdioma("ca");
        fichero.setSignNumber(1);
        fichero.setNombreFichero("hola.pdf");
        fichero.setRazon("Fichero prueba1");
        fichero.setSignID("666");
        fichero.setSesion(idSession);
        plgLogin.ficheroAFirmar(fichero);

        InputStream is2 = null;
        try {
            is2 = new DataInputStream(new FileInputStream("C://hola2.pdf"));
        } catch (final Exception e) {
            is2 = new DataInputStream(new FileInputStream("//hola2.pdf"));
        }
        final ByteArrayOutputStream fos2 = new ByteArrayOutputStream();
        FileUtils.copy(is2, fos2);
        final FicheroAFirmar fichero2 = new FicheroAFirmar();
        fichero2.setFichero(fos2.toByteArray());
        fichero2.setMimetypeFichero("application/pdf");
        fichero2.setIdioma("ca");
        fichero2.setSignNumber(1);
        fichero2.setNombreFichero("hola2.pdf");
        fichero2.setRazon("Fichero prueba1");
        fichero2.setSignID("777");
        fichero2.setSesion(idSession);
        plgLogin.ficheroAFirmar(fichero2);

        return null;
    }

    @Override
    public String testFirmaActivar(final String idSession)
            throws FirmaPluginException {

        final IFirmaPlugin plgLogin = (IFirmaPlugin) configuracionComponent
                .obtenerPluginEntidad(TypePluginEntidad.FIRMA, entidad);

        return plgLogin.iniciarSesionFirma(idSession, "http://www.google.es",
                null);
    }

    @Override
    public String testFirmaEstado(final String idSession)
            throws FirmaPluginException {

        final IFirmaPlugin plgLogin = (IFirmaPlugin) configuracionComponent
                .obtenerPluginEntidad(TypePluginEntidad.FIRMA, entidad);
        final TypeEstadoFirmado estado = plgLogin
                .obtenerEstadoSesionFirma(idSession);
        switch (estado) {
        case CANCELADO:
            return "CANCELADO";
        case EN_PROGRESO:
            return "En progreso";
        case FINALIZADO_CON_ERROR:
            return "Finalizado con error";
        case FINALIZADO_OK:
            return "Finalizado ok";
        case INICIALIZADO:
            return "Inicializado";
        default:
            return "Descononcido:" + estado;
        }
    }

    @Override
    public byte[] testFirmaDoc(final String idSession, final String idDoc)
            throws FirmaPluginException {

        final IFirmaPlugin plgLogin = (IFirmaPlugin) configuracionComponent
                .obtenerPluginEntidad(TypePluginEntidad.FIRMA, entidad);
        final FicheroFirmado fic = plgLogin.obtenerFirmaFichero(idSession,
                idDoc);
        if (fic == null) {
            return null;
        } else {
            return fic.getFirmaFichero();
        }
    }

    @Override
    public void testFirmaCerrar(final String idSession)
            throws FirmaPluginException {

        final IFirmaPlugin plgLogin = (IFirmaPlugin) configuracionComponent
                .obtenerPluginEntidad(TypePluginEntidad.FIRMA, entidad);
        plgLogin.cerrarSesionFirma(idSession);
    }